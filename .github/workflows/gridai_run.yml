name: "Grid.ai Run"
on:
  workflow_call:
    inputs:
      script_name:
        required: true
        default: "run.py"
        type: string   
      repository:
        required: false
        default: ""
        type: string     
      grid_url:
        required: false
        default: ""
        type: string    
      grid_args:
        required: false
        default: "--localdir --instance_type t2.medium --dependency_file requirements.txt"
        type: string    
      script_args:
        required: false
        default: ""
        type: string       
      poll_sec_interval:
        required: false
        default: 60
        type: string       
      max_sec_run:
        required: false
        default: 120
        type: string      
      max_cmd_err_cnt: 
        required: false
        default: 10
        type: string      
    secrets:
      username:
        required: true
      key:
        required: true
jobs:
  gridai-run:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - uses: actions/checkout@v2
        with:
          repository: ${{ inputs.repository }}
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8' # min version supported by Grid.ai
      - run: |
          python -m pip install --upgrade pip
      - run: |
          pip install lightning-grid --upgrade
      - run: |
          if [ ! -z "${{ inputs.grid_url }}" ]; then export GRID_URL=${{ inputs.grid_url }}; fi
          grid login --username ${{ secrets.username }} --key ${{ secrets.key }}
      - run: |
          grid run ${{ inputs.grid_args }} ${{ inputs.script_name }} ${{ inputs.script_args }} | tee grid.run.log
          RUN_NAME=$(grep grid_name grid.run.log | cut -d':' -f 2 | sed -e 's/^[[:space:]]*//')
          echo "RUN_NAME=${RUN_NAME}" >> $GITHUB_ENV
          if [[ -z "${RUN_NAME}" ]]; then
            echo "Error: grid_name not found in output"
            exit 1
          fi 
      - run: |
          cmd_err_cnt=0
          RUN_STATUS=unknown
          grid status --export json ${RUN_NAME} > grid.status.log 2>&1
          if [[ "$?" != 0 ]]; then
              (( cmd_err_cnt = cmd_err_cnt + 1 ))
          else
            JSON_FILE=$(cat grid.status.log | grep Exported | awk '{print $5}')
            RUN_STATUS=$(cat ${JSON_FILE} | jq -r -c '.[] | .status')
          fi
          # pool at 1 min interval
          while [ "${RUN_STATUS}" = 'queued' -o "${RUN_STATUS}" = 'running' -o "${RUN_STATUS}" = 'pending' -o "${RUN_STATUS}" = 'unknown' ]; do 
            echo "${RUN_NAME}:${RUN_STATUS} waiting ${{ inputs.poll_sec_interval }} sec for the next status"
            sleep ${{ inputs.poll_sec_interval }}
            grid status --export json ${RUN_NAME} > grid.status.log 2>&1
            if [[ "$?" != 0 ]]; then
              (( cmd_err_cnt = cmd_err_cnt + 1 ))
              echo "Error from grid status command: # ${cmd_err_cnt}"
              cat grid.status.log
              RUN_STATUS="unknown"
              if [[ ${cmd_err_cnt} > ${{ inputs.max_cmd_err_cnt }} ]]; then
                break
              fi
            else  
              JSON_FILE=$(cat grid.status.log | grep Exported | awk '{print $5}')
              RUN_STATUS=$(cat ${JSON_FILE} | jq -r -c '.[] | .status')
            fi
          done
          echo "${RUN_NAME}:${RUN_STATUS}"
          # only continue on successful completion
          case ${RUN_STATUS} in
            completed|succeeded)
              echo "${RUN_NAME}:completed"
              ;;
            *)
              echo "Error: ${RUN_NAME} did not finish with completed or succeeded"
              exit 1
          esac
      - run: |
          grid artifacts ${{ env.RUN_NAME }}
          if [[ $? != 0 ]]; then
            echo "Error: ${RUN_NAME} artifacts not found"
            exit 1
          fi
          ls grid_artifacts/*
